// Code generated by ent, DO NOT EDIT.

package usersegment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Rustixir/go-challenge/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldEQ(FieldUserID, v))
}

// Segment applies equality check predicate on the "segment" field. It's identical to SegmentEQ.
func Segment(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldEQ(FieldSegment, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldEQ(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldContainsFold(FieldUserID, v))
}

// SegmentEQ applies the EQ predicate on the "segment" field.
func SegmentEQ(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldEQ(FieldSegment, v))
}

// SegmentNEQ applies the NEQ predicate on the "segment" field.
func SegmentNEQ(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldNEQ(FieldSegment, v))
}

// SegmentIn applies the In predicate on the "segment" field.
func SegmentIn(vs ...string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldIn(FieldSegment, vs...))
}

// SegmentNotIn applies the NotIn predicate on the "segment" field.
func SegmentNotIn(vs ...string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldNotIn(FieldSegment, vs...))
}

// SegmentGT applies the GT predicate on the "segment" field.
func SegmentGT(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldGT(FieldSegment, v))
}

// SegmentGTE applies the GTE predicate on the "segment" field.
func SegmentGTE(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldGTE(FieldSegment, v))
}

// SegmentLT applies the LT predicate on the "segment" field.
func SegmentLT(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldLT(FieldSegment, v))
}

// SegmentLTE applies the LTE predicate on the "segment" field.
func SegmentLTE(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldLTE(FieldSegment, v))
}

// SegmentContains applies the Contains predicate on the "segment" field.
func SegmentContains(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldContains(FieldSegment, v))
}

// SegmentHasPrefix applies the HasPrefix predicate on the "segment" field.
func SegmentHasPrefix(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldHasPrefix(FieldSegment, v))
}

// SegmentHasSuffix applies the HasSuffix predicate on the "segment" field.
func SegmentHasSuffix(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldHasSuffix(FieldSegment, v))
}

// SegmentEqualFold applies the EqualFold predicate on the "segment" field.
func SegmentEqualFold(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldEqualFold(FieldSegment, v))
}

// SegmentContainsFold applies the ContainsFold predicate on the "segment" field.
func SegmentContainsFold(v string) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldContainsFold(FieldSegment, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserSegment {
	return predicate.UserSegment(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSegment) predicate.UserSegment {
	return predicate.UserSegment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSegment) predicate.UserSegment {
	return predicate.UserSegment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSegment) predicate.UserSegment {
	return predicate.UserSegment(sql.NotPredicates(p))
}
