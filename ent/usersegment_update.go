// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Rustixir/go-challenge/ent/predicate"
	"github.com/Rustixir/go-challenge/ent/usersegment"
)

// UserSegmentUpdate is the builder for updating UserSegment entities.
type UserSegmentUpdate struct {
	config
	hooks    []Hook
	mutation *UserSegmentMutation
}

// Where appends a list predicates to the UserSegmentUpdate builder.
func (usu *UserSegmentUpdate) Where(ps ...predicate.UserSegment) *UserSegmentUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetUserID sets the "user_id" field.
func (usu *UserSegmentUpdate) SetUserID(s string) *UserSegmentUpdate {
	usu.mutation.SetUserID(s)
	return usu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usu *UserSegmentUpdate) SetNillableUserID(s *string) *UserSegmentUpdate {
	if s != nil {
		usu.SetUserID(*s)
	}
	return usu
}

// SetSegment sets the "segment" field.
func (usu *UserSegmentUpdate) SetSegment(s string) *UserSegmentUpdate {
	usu.mutation.SetSegment(s)
	return usu
}

// SetNillableSegment sets the "segment" field if the given value is not nil.
func (usu *UserSegmentUpdate) SetNillableSegment(s *string) *UserSegmentUpdate {
	if s != nil {
		usu.SetSegment(*s)
	}
	return usu
}

// SetCreatedAt sets the "created_at" field.
func (usu *UserSegmentUpdate) SetCreatedAt(t time.Time) *UserSegmentUpdate {
	usu.mutation.SetCreatedAt(t)
	return usu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usu *UserSegmentUpdate) SetNillableCreatedAt(t *time.Time) *UserSegmentUpdate {
	if t != nil {
		usu.SetCreatedAt(*t)
	}
	return usu
}

// Mutation returns the UserSegmentMutation object of the builder.
func (usu *UserSegmentUpdate) Mutation() *UserSegmentMutation {
	return usu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSegmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSegmentUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSegmentUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSegmentUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usu *UserSegmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usersegment.Table, usersegment.Columns, sqlgraph.NewFieldSpec(usersegment.FieldID, field.TypeInt))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.UserID(); ok {
		_spec.SetField(usersegment.FieldUserID, field.TypeString, value)
	}
	if value, ok := usu.mutation.Segment(); ok {
		_spec.SetField(usersegment.FieldSegment, field.TypeString, value)
	}
	if value, ok := usu.mutation.CreatedAt(); ok {
		_spec.SetField(usersegment.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersegment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSegmentUpdateOne is the builder for updating a single UserSegment entity.
type UserSegmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSegmentMutation
}

// SetUserID sets the "user_id" field.
func (usuo *UserSegmentUpdateOne) SetUserID(s string) *UserSegmentUpdateOne {
	usuo.mutation.SetUserID(s)
	return usuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usuo *UserSegmentUpdateOne) SetNillableUserID(s *string) *UserSegmentUpdateOne {
	if s != nil {
		usuo.SetUserID(*s)
	}
	return usuo
}

// SetSegment sets the "segment" field.
func (usuo *UserSegmentUpdateOne) SetSegment(s string) *UserSegmentUpdateOne {
	usuo.mutation.SetSegment(s)
	return usuo
}

// SetNillableSegment sets the "segment" field if the given value is not nil.
func (usuo *UserSegmentUpdateOne) SetNillableSegment(s *string) *UserSegmentUpdateOne {
	if s != nil {
		usuo.SetSegment(*s)
	}
	return usuo
}

// SetCreatedAt sets the "created_at" field.
func (usuo *UserSegmentUpdateOne) SetCreatedAt(t time.Time) *UserSegmentUpdateOne {
	usuo.mutation.SetCreatedAt(t)
	return usuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usuo *UserSegmentUpdateOne) SetNillableCreatedAt(t *time.Time) *UserSegmentUpdateOne {
	if t != nil {
		usuo.SetCreatedAt(*t)
	}
	return usuo
}

// Mutation returns the UserSegmentMutation object of the builder.
func (usuo *UserSegmentUpdateOne) Mutation() *UserSegmentMutation {
	return usuo.mutation
}

// Where appends a list predicates to the UserSegmentUpdate builder.
func (usuo *UserSegmentUpdateOne) Where(ps ...predicate.UserSegment) *UserSegmentUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSegmentUpdateOne) Select(field string, fields ...string) *UserSegmentUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSegment entity.
func (usuo *UserSegmentUpdateOne) Save(ctx context.Context) (*UserSegment, error) {
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSegmentUpdateOne) SaveX(ctx context.Context) *UserSegment {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSegmentUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSegmentUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usuo *UserSegmentUpdateOne) sqlSave(ctx context.Context) (_node *UserSegment, err error) {
	_spec := sqlgraph.NewUpdateSpec(usersegment.Table, usersegment.Columns, sqlgraph.NewFieldSpec(usersegment.FieldID, field.TypeInt))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSegment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersegment.FieldID)
		for _, f := range fields {
			if !usersegment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usersegment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.UserID(); ok {
		_spec.SetField(usersegment.FieldUserID, field.TypeString, value)
	}
	if value, ok := usuo.mutation.Segment(); ok {
		_spec.SetField(usersegment.FieldSegment, field.TypeString, value)
	}
	if value, ok := usuo.mutation.CreatedAt(); ok {
		_spec.SetField(usersegment.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &UserSegment{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersegment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
